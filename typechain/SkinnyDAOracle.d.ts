/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SkinnyDAOracleInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MANAGER()": FunctionFragment;
    "ORACLE()": FunctionFragment;
    "PROPOSAL_TYPEHASH()": FunctionFragment;
    "PROPOSER()": FunctionFragment;
    "_proposalId(uint32,int256,bytes32)": FunctionFragment;
    "claimableRewards(bytes32)": FunctionFragment;
    "configureIndex(address,uint256,bytes32,uint32,uint64,uint64,uint64,uint256,uint64,address,address)": FunctionFragment;
    "defaultDisputePeriod()": FunctionFragment;
    "dispute(bytes32)": FunctionFragment;
    "externalIdentifier()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "index(bytes32)": FunctionFragment;
    "isDisputed(bytes32)": FunctionFragment;
    "maxOutstandingDisputes()": FunctionFragment;
    "oracle()": FunctionFragment;
    "pool(address)": FunctionFragment;
    "priceSettled(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "proposal(bytes32)": FunctionFragment;
    "relay((bytes32,uint32,int256,bytes32),bytes,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setExternalIdentifier(bytes32)": FunctionFragment;
    "setMaxOutstandingDisputes(uint32)": FunctionFragment;
    "setPoolFees(address,uint256,uint256,address)": FunctionFragment;
    "setdefaultDisputePeriod(uint32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MANAGER", values?: undefined): string;
  encodeFunctionData(functionFragment: "ORACLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PROPOSAL_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PROPOSER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_proposalId",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableRewards",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "configureIndex",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultDisputePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dispute", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "externalIdentifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "index", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "isDisputed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxOutstandingDisputes",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "priceSettled",
    values: [
      BytesLike,
      BigNumberish,
      BytesLike,
      {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
        bond: BigNumberish;
        customLiveness: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "proposal", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "relay",
    values: [
      {
        indexId: BytesLike;
        timestamp: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
      },
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setExternalIdentifier",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxOutstandingDisputes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolFees",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setdefaultDisputePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MANAGER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ORACLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PROPOSAL_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PROPOSER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_proposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultDisputePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dispute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "externalIdentifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "index", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isDisputed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxOutstandingDisputes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceSettled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExternalIdentifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxOutstandingDisputes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setdefaultDisputePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "Disputed(bytes32,bytes32,address)": EventFragment;
    "IndexConfigured(bytes32,address)": EventFragment;
    "Relayed(bytes32,bytes32,tuple,address,uint256)": EventFragment;
    "Rewarded(address,address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Settled(bytes32,bytes32,int256,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Disputed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IndexConfigured"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Relayed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rewarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settled"): EventFragment;
}

export type DisputedEvent = TypedEvent<
  [string, string, string] & {
    indexId: string;
    proposalId: string;
    disputer: string;
  }
>;

export type IndexConfiguredEvent = TypedEvent<
  [string, string] & { indexId: string; bondToken: string }
>;

export type RelayedEvent = TypedEvent<
  [
    string,
    string,
    [string, number, BigNumber, string] & {
      indexId: string;
      timestamp: number;
      value: BigNumber;
      data: string;
    },
    string,
    BigNumber
  ] & {
    indexId: string;
    proposalId: string;
    proposal: [string, number, BigNumber, string] & {
      indexId: string;
      timestamp: number;
      value: BigNumber;
      data: string;
    };
    relayer: string;
    bondAmount: BigNumber;
  }
>;

export type RewardedEvent = TypedEvent<
  [string, string, BigNumber] & {
    rewardee: string;
    token: string;
    amount: BigNumber;
  }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type SettledEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    indexId: string;
    proposalId: string;
    proposedValue: BigNumber;
    settledValue: BigNumber;
  }
>;

export class SkinnyDAOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SkinnyDAOracleInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MANAGER(overrides?: CallOverrides): Promise<[string]>;

    ORACLE(overrides?: CallOverrides): Promise<[string]>;

    PROPOSAL_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    PROPOSER(overrides?: CallOverrides): Promise<[string]>;

    _proposalId(
      timestamp: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    claimableRewards(
      indexId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        total: BigNumber;
        poolAmount: BigNumber;
        reporterAmount: BigNumber;
        residualAmount: BigNumber;
        vestingTime: BigNumber;
      }
    >;

    configureIndex(
      bondToken: string,
      bondAmount: BigNumberish,
      indexId: BytesLike,
      disputePeriod: BigNumberish,
      floor: BigNumberish,
      ceiling: BigNumberish,
      tilt: BigNumberish,
      drop: BigNumberish,
      creatorAmount: BigNumberish,
      creatorAddress: string,
      sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultDisputePeriod(overrides?: CallOverrides): Promise<[number]>;

    dispute(
      proposalId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    externalIdentifier(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    index(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string
      ] & {
        bondToken: string;
        lastUpdated: number;
        bondAmount: BigNumber;
        bondsOutstanding: BigNumber;
        disputesOutstanding: BigNumber;
        drop: BigNumber;
        floor: BigNumber;
        ceiling: BigNumber;
        tilt: BigNumber;
        creatorAmount: BigNumber;
        disputePeriod: number;
        creatorAddress: string;
        sponsor: string;
      }
    >;

    isDisputed(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    maxOutstandingDisputes(overrides?: CallOverrides): Promise<[number]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    pool(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    priceSettled(
      arg0: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
        bond: BigNumberish;
        customLiveness: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposal(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, string] & {
        indexId: string;
        timestamp: number;
        value: BigNumber;
        data: string;
      }
    >;

    relay(
      relayed: {
        indexId: BytesLike;
        timestamp: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExternalIdentifier(
      identifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxOutstandingDisputes(
      outstandingDisputes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolFees(
      token: string,
      mintFee: BigNumberish,
      burnFee: BigNumberish,
      payee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setdefaultDisputePeriod(
      disputePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MANAGER(overrides?: CallOverrides): Promise<string>;

  ORACLE(overrides?: CallOverrides): Promise<string>;

  PROPOSAL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  PROPOSER(overrides?: CallOverrides): Promise<string>;

  _proposalId(
    timestamp: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  claimableRewards(
    indexId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      total: BigNumber;
      poolAmount: BigNumber;
      reporterAmount: BigNumber;
      residualAmount: BigNumber;
      vestingTime: BigNumber;
    }
  >;

  configureIndex(
    bondToken: string,
    bondAmount: BigNumberish,
    indexId: BytesLike,
    disputePeriod: BigNumberish,
    floor: BigNumberish,
    ceiling: BigNumberish,
    tilt: BigNumberish,
    drop: BigNumberish,
    creatorAmount: BigNumberish,
    creatorAddress: string,
    sponsor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultDisputePeriod(overrides?: CallOverrides): Promise<number>;

  dispute(
    proposalId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  externalIdentifier(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  index(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      string,
      string
    ] & {
      bondToken: string;
      lastUpdated: number;
      bondAmount: BigNumber;
      bondsOutstanding: BigNumber;
      disputesOutstanding: BigNumber;
      drop: BigNumber;
      floor: BigNumber;
      ceiling: BigNumber;
      tilt: BigNumber;
      creatorAmount: BigNumber;
      disputePeriod: number;
      creatorAddress: string;
      sponsor: string;
    }
  >;

  isDisputed(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  maxOutstandingDisputes(overrides?: CallOverrides): Promise<number>;

  oracle(overrides?: CallOverrides): Promise<string>;

  pool(arg0: string, overrides?: CallOverrides): Promise<string>;

  priceSettled(
    arg0: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    request: {
      proposer: string;
      disputer: string;
      currency: string;
      settled: boolean;
      proposedPrice: BigNumberish;
      resolvedPrice: BigNumberish;
      expirationTime: BigNumberish;
      reward: BigNumberish;
      finalFee: BigNumberish;
      bond: BigNumberish;
      customLiveness: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposal(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber, string] & {
      indexId: string;
      timestamp: number;
      value: BigNumber;
      data: string;
    }
  >;

  relay(
    relayed: {
      indexId: BytesLike;
      timestamp: BigNumberish;
      value: BigNumberish;
      data: BytesLike;
    },
    signature: BytesLike,
    signer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExternalIdentifier(
    identifier: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxOutstandingDisputes(
    outstandingDisputes: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolFees(
    token: string,
    mintFee: BigNumberish,
    burnFee: BigNumberish,
    payee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setdefaultDisputePeriod(
    disputePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MANAGER(overrides?: CallOverrides): Promise<string>;

    ORACLE(overrides?: CallOverrides): Promise<string>;

    PROPOSAL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    PROPOSER(overrides?: CallOverrides): Promise<string>;

    _proposalId(
      timestamp: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    claimableRewards(
      indexId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        total: BigNumber;
        poolAmount: BigNumber;
        reporterAmount: BigNumber;
        residualAmount: BigNumber;
        vestingTime: BigNumber;
      }
    >;

    configureIndex(
      bondToken: string,
      bondAmount: BigNumberish,
      indexId: BytesLike,
      disputePeriod: BigNumberish,
      floor: BigNumberish,
      ceiling: BigNumberish,
      tilt: BigNumberish,
      drop: BigNumberish,
      creatorAmount: BigNumberish,
      creatorAddress: string,
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultDisputePeriod(overrides?: CallOverrides): Promise<number>;

    dispute(proposalId: BytesLike, overrides?: CallOverrides): Promise<void>;

    externalIdentifier(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    index(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string
      ] & {
        bondToken: string;
        lastUpdated: number;
        bondAmount: BigNumber;
        bondsOutstanding: BigNumber;
        disputesOutstanding: BigNumber;
        drop: BigNumber;
        floor: BigNumber;
        ceiling: BigNumber;
        tilt: BigNumber;
        creatorAmount: BigNumber;
        disputePeriod: number;
        creatorAddress: string;
        sponsor: string;
      }
    >;

    isDisputed(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    maxOutstandingDisputes(overrides?: CallOverrides): Promise<number>;

    oracle(overrides?: CallOverrides): Promise<string>;

    pool(arg0: string, overrides?: CallOverrides): Promise<string>;

    priceSettled(
      arg0: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
        bond: BigNumberish;
        customLiveness: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    proposal(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, string] & {
        indexId: string;
        timestamp: number;
        value: BigNumber;
        data: string;
      }
    >;

    relay(
      relayed: {
        indexId: BytesLike;
        timestamp: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      signer: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number] & {
        bond: BigNumber;
        proposalId: string;
        expiresAt: number;
      }
    >;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setExternalIdentifier(
      identifier: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxOutstandingDisputes(
      outstandingDisputes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolFees(
      token: string,
      mintFee: BigNumberish,
      burnFee: BigNumberish,
      payee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setdefaultDisputePeriod(
      disputePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Disputed(bytes32,bytes32,address)"(
      indexId?: BytesLike | null,
      proposalId?: BytesLike | null,
      disputer?: null
    ): TypedEventFilter<
      [string, string, string],
      { indexId: string; proposalId: string; disputer: string }
    >;

    Disputed(
      indexId?: BytesLike | null,
      proposalId?: BytesLike | null,
      disputer?: null
    ): TypedEventFilter<
      [string, string, string],
      { indexId: string; proposalId: string; disputer: string }
    >;

    "IndexConfigured(bytes32,address)"(
      indexId?: BytesLike | null,
      bondToken?: null
    ): TypedEventFilter<
      [string, string],
      { indexId: string; bondToken: string }
    >;

    IndexConfigured(
      indexId?: BytesLike | null,
      bondToken?: null
    ): TypedEventFilter<
      [string, string],
      { indexId: string; bondToken: string }
    >;

    "Relayed(bytes32,bytes32,tuple,address,uint256)"(
      indexId?: BytesLike | null,
      proposalId?: BytesLike | null,
      proposal?: null,
      relayer?: null,
      bondAmount?: null
    ): TypedEventFilter<
      [
        string,
        string,
        [string, number, BigNumber, string] & {
          indexId: string;
          timestamp: number;
          value: BigNumber;
          data: string;
        },
        string,
        BigNumber
      ],
      {
        indexId: string;
        proposalId: string;
        proposal: [string, number, BigNumber, string] & {
          indexId: string;
          timestamp: number;
          value: BigNumber;
          data: string;
        };
        relayer: string;
        bondAmount: BigNumber;
      }
    >;

    Relayed(
      indexId?: BytesLike | null,
      proposalId?: BytesLike | null,
      proposal?: null,
      relayer?: null,
      bondAmount?: null
    ): TypedEventFilter<
      [
        string,
        string,
        [string, number, BigNumber, string] & {
          indexId: string;
          timestamp: number;
          value: BigNumber;
          data: string;
        },
        string,
        BigNumber
      ],
      {
        indexId: string;
        proposalId: string;
        proposal: [string, number, BigNumber, string] & {
          indexId: string;
          timestamp: number;
          value: BigNumber;
          data: string;
        };
        relayer: string;
        bondAmount: BigNumber;
      }
    >;

    "Rewarded(address,address,uint256)"(
      rewardee?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { rewardee: string; token: string; amount: BigNumber }
    >;

    Rewarded(
      rewardee?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { rewardee: string; token: string; amount: BigNumber }
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "Settled(bytes32,bytes32,int256,int256)"(
      indexId?: BytesLike | null,
      proposalId?: BytesLike | null,
      proposedValue?: null,
      settledValue?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        indexId: string;
        proposalId: string;
        proposedValue: BigNumber;
        settledValue: BigNumber;
      }
    >;

    Settled(
      indexId?: BytesLike | null,
      proposalId?: BytesLike | null,
      proposedValue?: null,
      settledValue?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        indexId: string;
        proposalId: string;
        proposedValue: BigNumber;
        settledValue: BigNumber;
      }
    >;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    PROPOSAL_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    PROPOSER(overrides?: CallOverrides): Promise<BigNumber>;

    _proposalId(
      timestamp: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimableRewards(
      indexId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configureIndex(
      bondToken: string,
      bondAmount: BigNumberish,
      indexId: BytesLike,
      disputePeriod: BigNumberish,
      floor: BigNumberish,
      ceiling: BigNumberish,
      tilt: BigNumberish,
      drop: BigNumberish,
      creatorAmount: BigNumberish,
      creatorAddress: string,
      sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultDisputePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    dispute(
      proposalId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    externalIdentifier(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    index(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    isDisputed(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    maxOutstandingDisputes(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    pool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    priceSettled(
      arg0: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
        bond: BigNumberish;
        customLiveness: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposal(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    relay(
      relayed: {
        indexId: BytesLike;
        timestamp: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExternalIdentifier(
      identifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxOutstandingDisputes(
      outstandingDisputes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolFees(
      token: string,
      mintFee: BigNumberish,
      burnFee: BigNumberish,
      payee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setdefaultDisputePeriod(
      disputePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MANAGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROPOSAL_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROPOSER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _proposalId(
      timestamp: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimableRewards(
      indexId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    configureIndex(
      bondToken: string,
      bondAmount: BigNumberish,
      indexId: BytesLike,
      disputePeriod: BigNumberish,
      floor: BigNumberish,
      ceiling: BigNumberish,
      tilt: BigNumberish,
      drop: BigNumberish,
      creatorAmount: BigNumberish,
      creatorAddress: string,
      sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultDisputePeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dispute(
      proposalId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    externalIdentifier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    index(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDisputed(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxOutstandingDisputes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceSettled(
      arg0: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      request: {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        proposedPrice: BigNumberish;
        resolvedPrice: BigNumberish;
        expirationTime: BigNumberish;
        reward: BigNumberish;
        finalFee: BigNumberish;
        bond: BigNumberish;
        customLiveness: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposal(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relay(
      relayed: {
        indexId: BytesLike;
        timestamp: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExternalIdentifier(
      identifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxOutstandingDisputes(
      outstandingDisputes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolFees(
      token: string,
      mintFee: BigNumberish,
      burnFee: BigNumberish,
      payee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setdefaultDisputePeriod(
      disputePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
