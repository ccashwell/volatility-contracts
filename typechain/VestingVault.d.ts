/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VestingVaultInterface extends ethers.utils.Interface {
  functions: {
    "allocationCount(address)": FunctionFragment;
    "allocationSummary(address,uint256)": FunctionFragment;
    "issue(address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingAmount(address,address)": FunctionFragment;
    "release(address,uint256[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revoke(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userAllocations(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allocationCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allocationSummary",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingAmount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userAllocations",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allocationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocationSummary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAllocations",
    data: BytesLike
  ): Result;

  events: {
    "Issued(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Released(address,uint256,address,uint256,uint256)": EventFragment;
    "Revoked(address,uint256,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Issued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Released"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoked"): EventFragment;
}

export type IssuedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    beneficiary: string;
    token: string;
    amount: BigNumber;
    start: BigNumber;
    cliff: BigNumber;
    duration: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ReleasedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber] & {
    beneficiary: string;
    allocationId: BigNumber;
    token: string;
    amount: BigNumber;
    remaining: BigNumber;
  }
>;

export type RevokedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber] & {
    beneficiary: string;
    allocationId: BigNumber;
    token: string;
    allocationAmount: BigNumber;
    revokedAmount: BigNumber;
  }
>;

export class VestingVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VestingVaultInterface;

  functions: {
    allocationCount(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    allocationSummary(
      _beneficiary: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          token: string;
          start: BigNumber;
          cliff: BigNumber;
          duration: BigNumber;
          total: BigNumber;
          claimed: BigNumber;
        },
        BigNumber,
        BigNumber
      ] & {
        allocation: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          token: string;
          start: BigNumber;
          cliff: BigNumber;
          duration: BigNumber;
          total: BigNumber;
          claimed: BigNumber;
        };
        vested: BigNumber;
        releasable: BigNumber;
      }
    >;

    issue(
      _beneficiary: string,
      _token: string,
      _amount: BigNumberish,
      _startAt: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingAmount(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    release(
      _beneficiary: string,
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revoke(
      _beneficiary: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userAllocations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        start: BigNumber;
        cliff: BigNumber;
        duration: BigNumber;
        total: BigNumber;
        claimed: BigNumber;
      }
    >;
  };

  allocationCount(
    _beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allocationSummary(
    _beneficiary: string,
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        start: BigNumber;
        cliff: BigNumber;
        duration: BigNumber;
        total: BigNumber;
        claimed: BigNumber;
      },
      BigNumber,
      BigNumber
    ] & {
      allocation: [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        token: string;
        start: BigNumber;
        cliff: BigNumber;
        duration: BigNumber;
        total: BigNumber;
        claimed: BigNumber;
      };
      vested: BigNumber;
      releasable: BigNumber;
    }
  >;

  issue(
    _beneficiary: string,
    _token: string,
    _amount: BigNumberish,
    _startAt: BigNumberish,
    _cliff: BigNumberish,
    _duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingAmount(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  release(
    _beneficiary: string,
    _ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revoke(
    _beneficiary: string,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userAllocations(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      token: string;
      start: BigNumber;
      cliff: BigNumber;
      duration: BigNumber;
      total: BigNumber;
      claimed: BigNumber;
    }
  >;

  callStatic: {
    allocationCount(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allocationSummary(
      _beneficiary: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          token: string;
          start: BigNumber;
          cliff: BigNumber;
          duration: BigNumber;
          total: BigNumber;
          claimed: BigNumber;
        },
        BigNumber,
        BigNumber
      ] & {
        allocation: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          token: string;
          start: BigNumber;
          cliff: BigNumber;
          duration: BigNumber;
          total: BigNumber;
          claimed: BigNumber;
        };
        vested: BigNumber;
        releasable: BigNumber;
      }
    >;

    issue(
      _beneficiary: string,
      _token: string,
      _amount: BigNumberish,
      _startAt: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingAmount(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    release(
      _beneficiary: string,
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revoke(
      _beneficiary: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userAllocations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        start: BigNumber;
        cliff: BigNumber;
        duration: BigNumber;
        total: BigNumber;
        claimed: BigNumber;
      }
    >;
  };

  filters: {
    "Issued(address,address,uint256,uint256,uint256,uint256)"(
      beneficiary?: string | null,
      token?: null,
      amount?: null,
      start?: null,
      cliff?: null,
      duration?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        beneficiary: string;
        token: string;
        amount: BigNumber;
        start: BigNumber;
        cliff: BigNumber;
        duration: BigNumber;
      }
    >;

    Issued(
      beneficiary?: string | null,
      token?: null,
      amount?: null,
      start?: null,
      cliff?: null,
      duration?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        beneficiary: string;
        token: string;
        amount: BigNumber;
        start: BigNumber;
        cliff: BigNumber;
        duration: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Released(address,uint256,address,uint256,uint256)"(
      beneficiary?: string | null,
      allocationId?: BigNumberish | null,
      token?: null,
      amount?: null,
      remaining?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, BigNumber],
      {
        beneficiary: string;
        allocationId: BigNumber;
        token: string;
        amount: BigNumber;
        remaining: BigNumber;
      }
    >;

    Released(
      beneficiary?: string | null,
      allocationId?: BigNumberish | null,
      token?: null,
      amount?: null,
      remaining?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, BigNumber],
      {
        beneficiary: string;
        allocationId: BigNumber;
        token: string;
        amount: BigNumber;
        remaining: BigNumber;
      }
    >;

    "Revoked(address,uint256,address,uint256,uint256)"(
      beneficiary?: string | null,
      allocationId?: BigNumberish | null,
      token?: null,
      allocationAmount?: null,
      revokedAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, BigNumber],
      {
        beneficiary: string;
        allocationId: BigNumber;
        token: string;
        allocationAmount: BigNumber;
        revokedAmount: BigNumber;
      }
    >;

    Revoked(
      beneficiary?: string | null,
      allocationId?: BigNumberish | null,
      token?: null,
      allocationAmount?: null,
      revokedAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, BigNumber],
      {
        beneficiary: string;
        allocationId: BigNumber;
        token: string;
        allocationAmount: BigNumber;
        revokedAmount: BigNumber;
      }
    >;
  };

  estimateGas: {
    allocationCount(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allocationSummary(
      _beneficiary: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      _beneficiary: string,
      _token: string,
      _amount: BigNumberish,
      _startAt: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAmount(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    release(
      _beneficiary: string,
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revoke(
      _beneficiary: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userAllocations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allocationCount(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allocationSummary(
      _beneficiary: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issue(
      _beneficiary: string,
      _token: string,
      _amount: BigNumberish,
      _startAt: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAmount(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    release(
      _beneficiary: string,
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revoke(
      _beneficiary: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userAllocations(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
